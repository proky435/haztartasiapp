import React, { useEffect, useRef, useState } from 'react';
import Quagga from 'quagga';
import productsService from '../services/productsService';
import './BarcodeScanner.css';
import { isCameraSupported, isSecureContext } from '../utils/cameraUtils';

function BarcodeScanner({ onScan, onClose }) {
  const scannerRef = useRef(null);
  const isQuaggaStartedRef = useRef(false);
  const onScanRef = useRef(onScan);
  const [isScanning, setIsScanning] = useState(false);
  const [error, setError] = useState(null);
  const [isInitializing, setIsInitializing] = useState(true);

  // onScan ref friss√≠t√©se
  React.useEffect(() => {
    onScanRef.current = onScan;
  }, [onScan]);

  useEffect(() => {
    // Timeout az inicializ√°l√°shoz
    const initTimeout = setTimeout(() => {
      setError('Vonalk√≥d scanner inicializ√°l√°sa t√∫l sok√°ig tart. Pr√≥b√°ld √∫jra vagy haszn√°lj manu√°lis bevitelt.');
      setIsInitializing(false);
    }, 8000); // 8 m√°sodperc

    // Kamera t√°mogat√°s ellen≈ërz√©se
    if (!isCameraSupported()) {
      setError('Kamera hozz√°f√©r√©s nem t√°mogatott ebben a b√∂ng√©sz≈ëben');
      setIsInitializing(false);
      clearTimeout(initTimeout);
      return;
    }

    // HTTPS ellen≈ërz√©s (figyelmeztet√©s, de nem blokkol√≥)
    if (!isSecureContext()) {
      console.warn('Kamera hozz√°f√©r√©shez HTTPS kapcsolat aj√°nlott. Pr√≥b√°ld meg: https://192.168.0.19:3000');
    }

    if (scannerRef.current) {
      Quagga.init({
        inputStream: {
          name: "Live",
          type: "LiveStream",
          target: scannerRef.current,
          constraints: {
            width: 640,
            height: 480,
            facingMode: "environment"
          }
        },
        locator: {
          patchSize: "medium",
          halfSample: true
        },
        numOfWorkers: 1, // Egy worker a stabilit√°s√©rt
        frequency: 10, // K√∂zepes frekvencia
        decoder: {
          readers: [
            "ean_reader",
            "ean_8_reader"
          ]
        },
        locate: true
      }, (err) => {
        clearTimeout(initTimeout);
        if (err) {
          console.error('Quagga init error:', err);
          setError('Vonalk√≥d scanner inicializ√°l√°si hiba: ' + (err.message || err.toString()));
          setIsInitializing(false);
          return;
        }
        
        console.log("Quagga initialization finished");
        
        Quagga.onProcessed((result) => {
          if (result) {
            setIsScanning(true);
          }
        });

        Quagga.onDetected(async (result) => {
          const code = result.codeResult.code;
          console.log('Vonalk√≥d felismerve:', code);
          
          if (isQuaggaStartedRef.current) {
            try {
              Quagga.stop();
              isQuaggaStartedRef.current = false;
            } catch (stopErr) {
              console.warn('Error stopping Quagga after detection:', stopErr);
            }
          }
          
          // Term√©k keres√©se a backend API-ban
          try {
            setIsScanning(true);
            const product = await productsService.getProductByBarcode(code);
            
            if (product) {
              // Term√©k tal√°lva
              const formattedProduct = productsService.formatProductForDisplay(product);
              onScanRef.current(code, formattedProduct);
            } else {
              // Term√©k nem tal√°lhat√≥
              onScanRef.current(code, null);
            }
          } catch (error) {
            console.error('Product lookup error:', error);
            // Hiba eset√©n is visszaadjuk a vonalk√≥dot
            onScanRef.current(code, null);
          } finally {
            setIsScanning(false);
          }
        });

        Quagga.start((startErr) => {
          if (startErr) {
            console.error('Quagga start error:', startErr);
            setError('Vonalk√≥d scanner ind√≠t√°si hiba: ' + (startErr.message || startErr.toString()));
            setIsInitializing(false);
          } else {
            console.log('Quagga successfully started');
            isQuaggaStartedRef.current = true;
            setIsInitializing(false);
          }
        });
      });
    }

    return () => {
      clearTimeout(initTimeout);
      if (isQuaggaStartedRef.current) {
        try {
          Quagga.stop();
          isQuaggaStartedRef.current = false;
        } catch (cleanupErr) {
          console.warn('Error stopping Quagga during cleanup:', cleanupErr);
        }
      }
    };
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  const handleClose = () => {
    if (isQuaggaStartedRef.current) {
      try {
        Quagga.stop();
        isQuaggaStartedRef.current = false;
      } catch (closeErr) {
        console.warn('Error stopping Quagga on close:', closeErr);
      }
    }
    setIsScanning(false);
    onClose();
  };

  return (
    <div className="barcode-scanner-overlay">
      <div className="barcode-scanner-container">
        <div className="scanner-header">
          <h3>Vonalk√≥d Beolvas√°sa</h3>
          <button className="close-button" onClick={handleClose}>√ó</button>
        </div>
        <div className="scanner-content">
          {error ? (
            <div className="scanner-error">
              <p>‚ùå {error}</p>
              <div className="error-suggestions">
                <h4>Megold√°si javaslatok:</h4>
                <ul>
                  <li>Haszn√°lj HTTPS kapcsolatot: <strong>https://192.168.0.19:3000</strong></li>
                  <li>Friss√≠tsd a b√∂ng√©sz≈ët a leg√∫jabb verzi√≥ra</li>
                  <li>Enged√©lyezd a kamera hozz√°f√©r√©st</li>
                  <li>Ellen≈ërizd, hogy m√°s alkalmaz√°s nem haszn√°lja-e a kamer√°t</li>
                </ul>
                <button 
                  onClick={() => window.location.reload()} 
                  className="retry-button"
                >
                  üîÑ Oldal √∫jrat√∂lt√©se
                </button>
              </div>
            </div>
          ) : isInitializing ? (
            <div className="loading-container">
              <div className="loading-spinner"></div>
              <p>Vonalk√≥d scanner inicializ√°l√°sa...</p>
            </div>
          ) : (
            <>
              <div ref={scannerRef} className="scanner-viewport"></div>
              <div className="scanner-instructions">
                <p>Ir√°ny√≠tsd a kamer√°t a vonalk√≥dra</p>
                {isScanning && <div className="scanning-indicator">Keres√©s...</div>}
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
}

export default BarcodeScanner;
