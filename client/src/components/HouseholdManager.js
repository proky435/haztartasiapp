import React, { useState, useEffect } from 'react';
import householdsService from '../services/householdsService';
import './HouseholdManager.css';

function HouseholdManager({ user, currentHousehold, onHouseholdChange, onClose }) {
  const [households, setHouseholds] = useState([]);
  const [newHouseholdName, setNewHouseholdName] = useState('');
  const [inviteCode, setInviteCode] = useState('');
  const [generatedInviteCode, setGeneratedInviteCode] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('manage'); // 'manage', 'create', 'join'
  const [error, setError] = useState('');

  useEffect(() => {
    loadHouseholds();
  }, []);

  const loadHouseholds = async () => {
    try {
      const userHouseholds = await householdsService.getUserHouseholds();
      setHouseholds(userHouseholds);
    } catch (error) {
      console.error('Error loading households:', error);
    }
  };

  // √öj h√°ztart√°s l√©trehoz√°sa
  const handleCreateHousehold = async (e) => {
    e.preventDefault();
    if (!newHouseholdName.trim()) return;

    try {
      setIsLoading(true);
      setError('');
      const newHousehold = await householdsService.createHousehold({
        name: newHouseholdName.trim(),
        description: `${user.name} h√°ztart√°sa`
      });
      
      await loadHouseholds();
      setNewHouseholdName('');
      onHouseholdChange(newHousehold);
      setActiveTab('manage');
    } catch (error) {
      console.error('Error creating household:', error);
      setError(error.response?.data?.message || error.message || 'Hiba t√∂rt√©nt a h√°ztart√°s l√©trehoz√°sakor');
    } finally {
      setIsLoading(false);
    }
  };

  // Csatlakoz√°s h√°ztart√°shoz
  const handleJoinHousehold = async (e) => {
    e.preventDefault();
    if (!inviteCode.trim()) return;

    try {
      setIsLoading(true);
      setError('');
      const joinedHousehold = await householdsService.joinHousehold(inviteCode.trim());
      
      await loadHouseholds();
      setInviteCode('');
      onHouseholdChange(joinedHousehold);
      setActiveTab('manage');
    } catch (error) {
      console.error('Error joining household:', error);
      setError(error.response?.data?.message || error.message || 'Hiba t√∂rt√©nt a csatlakoz√°skor');
    } finally {
      setIsLoading(false);
    }
  };

  // Megh√≠v√≥ k√≥d gener√°l√°sa
  const handleGenerateInvite = async (householdId) => {
    try {
      setIsLoading(true);
      setError('');
      const invite = await householdsService.generateInviteCode(householdId);
      setGeneratedInviteCode(invite.inviteCode);
    } catch (error) {
      console.error('Error generating invite:', error);
      setError(error.response?.data?.message || error.message || 'Hiba t√∂rt√©nt a megh√≠v√≥ gener√°l√°sakor');
    } finally {
      setIsLoading(false);
    }
  };

  // Megh√≠v√≥ k√≥d m√°sol√°sa
  const copyInviteCode = () => {
    navigator.clipboard.writeText(generatedInviteCode);
    alert('Megh√≠v√≥ k√≥d v√°g√≥lapra m√°solva!');
  };

  return (
    <div className="modal-overlay">
      <div className="household-manager-modal">
        <div className="modal-header">
          <h2>H√°ztart√°sok Kezel√©se</h2>
          <button className="close-button" onClick={onClose}>√ó</button>
        </div>

        <div className="tabs">
          <button 
            className={`tab ${activeTab === 'manage' ? 'active' : ''}`}
            onClick={() => setActiveTab('manage')}
          >
            Kezel√©s
          </button>
          <button 
            className={`tab ${activeTab === 'create' ? 'active' : ''}`}
            onClick={() => setActiveTab('create')}
          >
            √öj H√°ztart√°s
          </button>
          <button 
            className={`tab ${activeTab === 'join' ? 'active' : ''}`}
            onClick={() => setActiveTab('join')}
          >
            Csatlakoz√°s
          </button>
        </div>

        {error && (
          <div className="error-message">
            {error}
          </div>
        )}

        <div className="tab-content">
          {activeTab === 'manage' && (
            <div className="manage-tab">
              <h3>H√°ztart√°saim</h3>
              {households.length === 0 ? (
                <div className="no-households">
                  <p>M√©g nincs h√°ztart√°sod.</p>
                  <p>Hozz l√©tre egyet vagy csatlakozz egy megl√©v≈ëh√∂z!</p>
                </div>
              ) : (
                <div className="households-list">
                  {households.map(household => (
                    <div 
                      key={household.id} 
                      className={`household-card ${currentHousehold?.id === household.id ? 'current' : ''}`}
                    >
                      <div className="household-info">
                        <h4>{household.name}</h4>
                        <p>{household.description}</p>
                        <div className="household-meta">
                          <span>üë• {household.memberCount || 1} tag</span>
                          <span>üì¶ {household.itemCount || 0} term√©k</span>
                          <span className="role">Szerepk√∂r: {household.userRole}</span>
                        </div>
                      </div>
                      
                      <div className="household-actions">
                        {currentHousehold?.id !== household.id && (
                          <button 
                            className="select-button"
                            onClick={() => onHouseholdChange(household)}
                          >
                            Kiv√°laszt
                          </button>
                        )}
                        
                        <button 
                          className="invite-button"
                          onClick={() => handleGenerateInvite(household.id)}
                          disabled={isLoading}
                        >
                          Megh√≠v√≥
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {generatedInviteCode && (
                <div className="invite-code-display">
                  <h4>Megh√≠v√≥ K√≥d</h4>
                  <div className="invite-code-box">
                    <code>{generatedInviteCode}</code>
                    <button onClick={copyInviteCode} className="copy-button">
                      üìã M√°sol√°s
                    </button>
                  </div>
                  <p className="invite-hint">
                    Oszd meg ezt a k√≥dot azokkal, akiket meg szeretn√©l h√≠vni a h√°ztart√°sba.
                  </p>
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="create-tab">
              <h3>√öj H√°ztart√°s L√©trehoz√°sa</h3>
              <form onSubmit={handleCreateHousehold}>
                <div className="form-group">
                  <label htmlFor="householdName">H√°ztart√°s neve:</label>
                  <input
                    type="text"
                    id="householdName"
                    value={newHouseholdName}
                    onChange={(e) => setNewHouseholdName(e.target.value)}
                    placeholder="pl. Kov√°cs csal√°d h√°ztart√°sa"
                    required
                  />
                </div>
                
                <button type="submit" disabled={isLoading || !newHouseholdName.trim() || households.length >= 5}>
                  {isLoading ? 'L√©trehoz√°s...' : households.length >= 5 ? 'Limit el√©rve (5/5)' : 'H√°ztart√°s L√©trehoz√°sa'}
                </button>
              </form>
              
              <div className="info-box">
                <h4>‚ÑπÔ∏è Tudnival√≥k</h4>
                <ul>
                  <li>Te leszel a h√°ztart√°s adminisztr√°tora</li>
                  <li>B√°rmely tag gener√°lhat megh√≠v√≥ k√≥dot</li>
                  <li>K√∂z√∂sen kezelhettek k√©szletet √©s bev√°s√°rl√≥list√°kat</li>
                  <li><strong>Maximum 5 h√°ztart√°snak lehetsz tagja ({households.length}/5)</strong></li>
                </ul>
              </div>
            </div>
          )}

          {activeTab === 'join' && (
            <div className="join-tab">
              <h3>Csatlakoz√°s H√°ztart√°shoz</h3>
              <form onSubmit={handleJoinHousehold}>
                <div className="form-group">
                  <label htmlFor="inviteCode">Megh√≠v√≥ k√≥d:</label>
                  <input
                    type="text"
                    id="inviteCode"
                    value={inviteCode}
                    onChange={(e) => setInviteCode(e.target.value)}
                    placeholder="√çrd be a megh√≠v√≥ k√≥dot"
                    required
                  />
                </div>
                
                <button type="submit" disabled={isLoading || !inviteCode.trim() || households.length >= 5}>
                  {isLoading ? 'Csatlakoz√°s...' : households.length >= 5 ? 'Limit el√©rve (5/5)' : 'Csatlakoz√°s'}
                </button>
              </form>
              
              <div className="info-box">
                <h4>‚ÑπÔ∏è Hogyan m≈±k√∂dik?</h4>
                <ul>
                  <li>K√©rj megh√≠v√≥ k√≥dot b√°rmely h√°ztart√°s tagt√≥l</li>
                  <li>√çrd be a k√≥dot a fenti mez≈ëbe</li>
                  <li>Csatlakoz√°s ut√°n l√°thatod a k√∂z√∂s k√©szletet</li>
                  <li><strong>Maximum 5 h√°ztart√°snak lehetsz tagja ({households.length}/5)</strong></li>
                </ul>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default HouseholdManager;
