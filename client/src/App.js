import React, { useState, useEffect } from 'react';
import './App.css';
import ProductList from './components/ProductList';
import NewProductModal from './components/NewProductModal';
import LoginPage from './components/LoginPage';
import UserProfile from './components/UserProfile';
import WelcomeMessage from './components/WelcomeMessage';
import ShoppingList from './components/ShoppingList';
import NotificationBanner from './components/NotificationBanner';
import HouseholdManager from './components/HouseholdManager';
import authService from './services/authService';
import householdsService from './services/householdsService';
import inventoryService from './services/inventoryService';

function App() {
  const [user, setUser] = useState(null);
  const [currentHousehold, setCurrentHousehold] = useState(null);
  const [households, setHouseholds] = useState([]);
  const [showUserProfile, setShowUserProfile] = useState(false);
  const [showWelcome, setShowWelcome] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [showHouseholdManager, setShowHouseholdManager] = useState(false);
  const [currentView, setCurrentView] = useState('inventory'); // 'inventory' vagy 'shopping'
  const [isLoading, setIsLoading] = useState(true);
  const [shoppingItems, setShoppingItems] = useState([]);
  const [products, setProducts] = useState([]);
  const [inventoryLoading, setInventoryLoading] = useState(false);

  const handleOpenModal = () => {
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
  };

  const handleAddProduct = async (newProduct) => {
    try {
      setInventoryLoading(true);
      await inventoryService.addInventoryItem(newProduct);
      await loadInventory(); // Friss√≠tj√ºk a list√°t
      setIsModalOpen(false);
    } catch (error) {
      console.error('Error adding product:', error);
      alert('Hiba t√∂rt√©nt a term√©k hozz√°ad√°sakor: ' + error.message);
    } finally {
      setInventoryLoading(false);
    }
  };

  const handleUpdateProduct = async (productId, newQuantity) => {
    try {
      console.log('Term√©k friss√≠t√©se:', { productId, newQuantity });
      
      if (newQuantity <= 0) {
        // Ha a mennyis√©g 0 vagy kevesebb, t√∂r√∂lj√ºk a term√©ket
        console.log('Mennyis√©g <= 0, term√©k t√∂rl√©se');
        await handleDeleteProduct(productId);
        return;
      }
      
      // Optimista UI friss√≠t√©s - azonnal friss√≠tj√ºk a UI-t
      setProducts(prevProducts => 
        prevProducts.map(product => 
          product.id === productId 
            ? { ...product, quantity: newQuantity }
            : product
        )
      );
      
      // Backend friss√≠t√©s
      await inventoryService.updateInventoryItem(productId, { quantity: newQuantity });
      console.log('Term√©k sikeresen friss√≠tve a backend-en');
      
      // Biztons√°gi √∫jrat√∂lt√©s (ha sz√ºks√©ges)
      setTimeout(() => {
        loadInventory();
      }, 500);
      
    } catch (error) {
      console.error('Error updating product:', error);
      // Ha hiba volt, t√∂ltj√ºk √∫jra a list√°t a backend-r≈ël
      await loadInventory();
      alert('Hiba t√∂rt√©nt a term√©k friss√≠t√©sekor: ' + error.message);
    }
  };

  const handleDeleteProduct = async (productId) => {
    try {
      console.log('Term√©k t√∂rl√©se:', productId);
      
      // Optimista UI friss√≠t√©s - azonnal elt√°vol√≠tjuk a UI-b√≥l
      setProducts(prevProducts => 
        prevProducts.filter(product => product.id !== productId)
      );
      
      // Backend t√∂rl√©s
      await inventoryService.deleteInventoryItem(productId);
      console.log('Term√©k sikeresen t√∂r√∂lve a backend-en');
      
      // Biztons√°gi √∫jrat√∂lt√©s
      setTimeout(() => {
        loadInventory();
      }, 500);
      
    } catch (error) {
      console.error('Error deleting product:', error);
      // Ha hiba volt, t√∂ltj√ºk √∫jra a list√°t a backend-r≈ël
      await loadInventory();
      alert('Hiba t√∂rt√©nt a term√©k t√∂rl√©sekor: ' + error.message);
    }
  };

  // Bev√°s√°rl√≥lista kezel≈ë funkci√≥k (m√°r nem haszn√°lt - backend integr√°ci√≥ miatt)

  // Felhaszn√°l√≥ kezel≈ë funkci√≥k
  const handleLogin = async (userData) => {
    setUser(userData);
    setShowWelcome(true);
    
    // H√°ztart√°sok bet√∂lt√©se bejelentkez√©s ut√°n
    await loadUserHouseholds(userData);
  };

  const handleLogout = async () => {
    try {
      await authService.logout();
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      setUser(null);
      setCurrentHousehold(null);
      setHouseholds([]);
      setProducts([]);
      setShowUserProfile(false);
      
      // Cache-ek tiszt√≠t√°sa
      householdsService.clearCurrentHouseholdCache();
      localStorage.removeItem('shoppingItems');
      localStorage.removeItem('inventoryItems');
    }
  };

  // H√°ztart√°s kezel≈ë f√ºggv√©nyek
  const handleHouseholdChange = async (household) => {
    setCurrentHousehold(household);
    householdsService.setCurrentHousehold(household);
    await loadInventory();
    setShowHouseholdManager(false);
  };

  const handleUpdateProfile = (updatedData) => {
    const updatedUser = { ...user, ...updatedData };
    setUser(updatedUser);
    localStorage.setItem('user', JSON.stringify(updatedUser));
  };

  // Alkalmaz√°s inicializ√°l√°sa
  useEffect(() => {
    initializeApp();
    
    // Debug funkci√≥k el√©rhet≈ëv√© t√©tele a console-b√≥l
    window.debugApp = {
      clearCache: () => householdsService.clearAllCache(),
      forceReset: () => householdsService.forceReset(),
      reloadHouseholds: () => loadUserHouseholds(),
      reloadInventory: () => loadInventory(),
      getCurrentHousehold: () => householdsService.getCurrentHousehold(),
      getHouseholds: () => households,
      getProducts: () => products,
      updateProduct: (id, quantity) => handleUpdateProduct(id, quantity)
    };
    console.log('üîß Debug funkci√≥k el√©rhet≈ëk: window.debugApp');
  }, []);

  const initializeApp = async () => {
    try {
      setIsLoading(true);
      
      // Pr√≥b√°ljuk meg inicializ√°lni az auth-ot
      const authenticatedUser = await authService.initializeAuth();
      
      if (authenticatedUser) {
        setUser(authenticatedUser);
        await loadUserHouseholds(authenticatedUser);
      }
    } catch (error) {
      console.error('App initialization error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const loadUserHouseholds = async () => {
    try {
      console.log('H√°ztart√°sok bet√∂lt√©se...');
      
      // El≈ësz√∂r t√∂r√∂lj√ºk a cache-t ha probl√©m√°s
      const savedHousehold = householdsService.getCurrentHousehold();
      
      let userHouseholds = await householdsService.getUserHouseholds();
      console.log('Bet√∂lt√∂tt h√°ztart√°sok:', userHouseholds.length, userHouseholds.map(h => ({ name: h.name, id: h.id, role: h.userRole })));
      
      // Ha nincs h√°ztart√°s, hozzunk l√©tre egy alap√©rtelmezettet
      if (!userHouseholds || userHouseholds.length === 0) {
        console.log('Nincs h√°ztart√°s, l√©trehozunk egy alap√©rtelmezettet...');
        
        // T√∂r√∂lj√ºk a cache-t miel≈ëtt √∫j h√°ztart√°st hozunk l√©tre
        householdsService.clearAllCache();
        
        const defaultHousehold = await householdsService.createHousehold({
          name: `${user.name} h√°ztart√°sa`,
          description: 'Alap√©rtelmezett h√°ztart√°s'
        });
        userHouseholds = [defaultHousehold];
        console.log('√öj h√°ztart√°s l√©trehozva:', defaultHousehold.name, defaultHousehold.id);
      }
      
      setHouseholds(userHouseholds);
      
      // V√°lasszuk ki az els≈ë h√°ztart√°st vagy a kor√°bban mentett (csak ha √©rv√©nyes)
      let selectedHousehold = null;
      
      // Ellen≈ërizz√ºk, hogy a mentett h√°ztart√°s m√©g mindig el√©rhet≈ë-e
      if (savedHousehold && userHouseholds.find(h => h.id === savedHousehold.id)) {
        selectedHousehold = savedHousehold;
        console.log('Mentett h√°ztart√°s m√©g √©rv√©nyes:', savedHousehold.name);
      } else {
        selectedHousehold = userHouseholds[0] || null;
        if (savedHousehold) {
          console.warn('Mentett h√°ztart√°s m√°r nem el√©rhet≈ë, teljes cache t√∂rl√©se');
          householdsService.clearAllCache();
        }
        if (selectedHousehold) {
          console.log('√öj h√°ztart√°s kiv√°laszt√°sa:', selectedHousehold.name);
        }
      }
      
      if (selectedHousehold) {
        setCurrentHousehold(selectedHousehold);
        householdsService.setCurrentHousehold(selectedHousehold);
        await loadInventory(); // K√©szlet bet√∂lt√©se
      } else {
        console.error('Nincs el√©rhet≈ë h√°ztart√°s - ez nem kellene hogy megt√∂rt√©njen!');
        householdsService.clearAllCache();
      }
    } catch (error) {
      console.error('Error loading households:', error);
      // Ha hiba van, t√∂r√∂lj√ºk a cache-t √©s pr√≥b√°ljuk √∫jra
      console.log('Hiba miatt cache t√∂rl√©se √©s √∫jrapr√≥b√°l√°s...');
      householdsService.clearAllCache();
    }
  };

  // K√©szlet bet√∂lt√©se
  const loadInventory = async () => {
    try {
      console.log('üîÑ K√©szlet √∫jrat√∂lt√©se...');
      setInventoryLoading(true);
      const inventory = await inventoryService.getCurrentHouseholdInventory();
      const formattedItems = inventory.items.map(item => 
        inventoryService.formatItemForDisplay(item)
      );
      console.log('‚úÖ K√©szlet bet√∂ltve:', formattedItems.length, 't√©tel');
      console.log('Term√©kek:', formattedItems.map(p => ({ id: p.id, name: p.name, quantity: p.quantity })));
      setProducts(formattedItems);
    } catch (error) {
      console.error('‚ùå Error loading inventory:', error);
      setProducts([]);
    } finally {
      setInventoryLoading(false);
    }
  };

  // Click outside handler a user profile bez√°r√°s√°hoz
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (showUserProfile && !event.target.closest('.user-menu')) {
        setShowUserProfile(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showUserProfile]);

  // Ha nincs bejelentkezve, mutassuk a login oldalt
  // Loading √°llapot
  if (isLoading) {
    return (
      <div className="App loading-state">
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>Bet√∂lt√©s...</p>
        </div>
      </div>
    );
  }

  // Login oldal
  if (!user) {
    return <LoginPage onLogin={handleLogin} />;
  }

  return (
    <div className="App">
      <NotificationBanner products={products} />
      <header className="App-header">
        <div className="header-left">
          <h1>H√°ztart√°si K√©szletkezel≈ë</h1>
          
          {/* H√°ztart√°s v√°laszt√≥ */}
          {households.length > 0 && (
            <div className="household-selector">
              <select 
                value={currentHousehold?.id || ''} 
                onChange={async (e) => {
                  const selected = households.find(h => h.id === e.target.value);
                  setCurrentHousehold(selected);
                  householdsService.setCurrentHousehold(selected);
                  if (selected) {
                    await loadInventory(); // √öj h√°ztart√°s k√©szlet√©nek bet√∂lt√©se
                  }
                }}
                className="household-select"
              >
                {households.map(household => (
                  <option key={household.id} value={household.id}>
                    üè† {household.name}
                  </option>
                ))}
              </select>
              <button 
                className="manage-households-button"
                onClick={() => setShowHouseholdManager(true)}
                title="H√°ztart√°sok kezel√©se"
              >
                ‚öôÔ∏è
              </button>
            </div>
          )}
          
          <nav className="main-navigation">
            <button 
              className={`nav-button ${currentView === 'inventory' ? 'active' : ''}`}
              onClick={() => setCurrentView('inventory')}
            >
              üì¶ K√©szlet ({products.length})
            </button>
            <button 
              className={`nav-button ${currentView === 'shopping' ? 'active' : ''}`}
              onClick={() => setCurrentView('shopping')}
            >
              üõí Bev√°s√°rl√°s ({shoppingItems.filter(item => !item.purchased).length})
            </button>
          </nav>
        </div>
        
        <div className="header-right">
          {currentView === 'inventory' && (
            <button className="add-product-button" onClick={handleOpenModal}>
              + √öj Term√©k
            </button>
          )}
          
          <div className="user-menu">
            <button 
              className="user-button"
              onClick={() => setShowUserProfile(!showUserProfile)}
            >
              <span className="user-avatar">
                {user.name.charAt(0).toUpperCase()}
              </span>
              <span className="user-name">{user.name}</span>
              <span className="dropdown-arrow">‚ñº</span>
            </button>
            
            {showUserProfile && (
              <UserProfile 
                user={user}
                onLogout={handleLogout}
                onUpdateProfile={handleUpdateProfile}
              />
            )}
          </div>
        </div>
      </header>
      
      <main>
        {currentView === 'inventory' ? (
          inventoryLoading ? (
            <div className="loading-state">
              <div className="spinner"></div>
              <p>K√©szlet bet√∂lt√©se...</p>
            </div>
          ) : (
            <ProductList 
              products={products} 
              onUpdate={handleUpdateProduct}
              onDelete={handleDeleteProduct}
            />
          )
        ) : (
          <ShoppingList 
            onItemsChange={(items) => setShoppingItems(items)}
            currentHousehold={currentHousehold}
          />
        )}
      </main>
      
      {isModalOpen && (
        <NewProductModal 
          onClose={handleCloseModal} 
          onAdd={handleAddProduct} 
        />
      )}
      
      {showWelcome && (
        <WelcomeMessage 
          user={user}
          onDismiss={() => setShowWelcome(false)}
        />
      )}

      {showHouseholdManager && (
        <HouseholdManager
          user={user}
          currentHousehold={currentHousehold}
          onHouseholdChange={handleHouseholdChange}
          onClose={() => setShowHouseholdManager(false)}
        />
      )}
    </div>
  );
}

export default App;
